{
    "datapoints_tooltip": "Number of datapoints of the lightcurve. \nIncreasing its number will provide a smoother curve as well as slowing down the animation, as the number of frames is linked to the lightcurve datapoints.",
    "orbits_tooltip": "Number of orbits to run the simulation for. Always referred to the planet with the longest period.",
    "frame-rate_tooltip": "Frame rate in milliseconds.\n Increase to slow down the animation. Animations with longer frame rate will take longer to process.",
    "longitude-ascending-node_tooltip": "Longitude of the ascending node (0<=Î©<=1).\n Selects the position of closest point of the orbit to the star. Use it to rotate the orbit. For planar orbit (i.e. i=0) and circular (e = 0) it is undefined and has the same effect as the phase.",
    "phase_tooltip": "Phase of the planet at t<sub>0</sub> (0<=Ï•<=1). Use to select the initial position of the planet",
    "eccentricity_tooltip": "Eccentricity of the orbit (0<=<i>e</i><=1).<br> <i>e</i> = 0 sets a circular orbit.",
    "inclination_tooltip": "Inclination or orientation of the orbit (-90Â°<=<i>i</i><=+90Â°) with respect to the ecliptic.<br> <i>i</i> = 0Â° for a co-planar orbit. \n The sign controls the direction of the rotation.\nPositive inclinations set the rotation counterclockwise.\nNegative inclinations set the rotation clockwise.",
    "mc-points_tooltip": "Number of Monte Carlo samples drawn from the stellar surface for the calculation of the transit profile. Keep it low while you experiment as it slows down the calculation. Once you are happy increase it until the lightcurve transit looks smooth. Only relevant for multiplanetary transits.",
    "planet-mass_tooltip": "Mass of the planet in Jupyter masses",
    "planet-radius_tooltip": "Radius of the planet in Jupyter radii",
    "about-text": "<p>This application allows you to build your custom planetary system in order to evaluate the amount of light they would eclipse from the host star as they transit in front of it.</p><p>The program calculates the eclipsing area of all planets as a function of time, accounting for the eclipses between planets as well. The top panels show the system observed as an edge/face on observer (i.e. from the ecliptic plane and as viewed 90Â° from it) while the lower panel shows the light received from the star as the planets orbit. The shadows of the planets however do not consider the eclipses induced by the other planets.</p><p>The equations employed do not account for the gravitational pull of the various planets, only from the host star. As such, the calculations are valid in the M<sub>ð“‡³</sub>>>M<sub>planet</sub>. If this condition is not satisfied then the program is less accurate. As such, the application is intended mostly for illustrative/educational purposes. Moreover, despite the star being limb-darkened for visualization purposes, this is also not accounted in the generated lightcurve.</p><p>The idea occured to me during a trip as teaching staff to the Observatorio del Teide in Tenerife, Spain, where some of the student from the University of Southampton carried out observations of exoplanet transits. We decided to work out analytically the area covered by a planet during a transit for an arbitrary orbit and I quickly built a prototype in python. The rest is history.</p>",
    "manual-text": "<p>The most straightforward way to start is to head to the Planets menu on the bottom right corner and press the \"+\" button (alternatively you can press the \"+\" on your keyboard numpad). This will allow you add a planet with the desired properties (mass and radius) and orbital parameters. The alongside animation will show the effects of varying each parameter in turn on both the orbit and the transit properties. The planet parameters cannot be larger than those of the host star and its orbit must lie outside the stellar radius (i.e. the program will warn you if your planet crashes onto the star!).</p><p>Once you press the \"Add\" button, the animation will start showing the resulting orbit and lightcurve (bottom panel) as the planet orbits. The top panels show the system observed as an edge/face on observer (i.e. from the ecliptic plane and as viewed 90Â° from it) while the lower panel shows the relative flux (or light) received from the star as the planets orbit. You can click on any of the animation panels or press the space bar to pause the animation. Clicking or pressing the space bar again will resume them.</p><p>The Lightcurve menu allows to control the number of datapoints of the lightcurve (<i>N</i>), the number of orbits for which the animation runs and the number of points used in the Monte Carlo calculation (see below).</p> <ol> <li> <strong>Orbit</strong>: The orbit is always taken to be that of the planet with the longest period.</li> <li><strong>MC points</strong>: This allows you to control the number of points used in the Monte Carlo calculation of the eclipsed area of the star. More points will slow down the calculation but may be necessary to obtain an accurate lightcurve. Best strategy is to keep the number relatively low until you are satisfied with your simulation.</li> </ol> The export button allows to retrieve in comma-separated format (or comma-separated values; csv) the relative flux from the star as a function of time (i.e. the numerical values of what is being shown on the lower panel).</p><p>The Animation panel allows to control the speed of the animation and to download them in .webm format. The more frames per millisecond, the slower the animation will run. It will also take longer to download. Adjust <i>N</i>, the number of orbits and the frame rate to ensure the animation looks sensible before downloading it.</p><p>Finally one last tip: if all you are after is a beautiful demonstration of how a planetary transit occurs, then aim for abnormally large (and even unrealistic) planets and very short periods, as that's going to give you the most visually appealing animation.</p><p>That's all, enjoy!</p><p>Send your feedback (positive or negative!) at: andres.gurpide.astro@gmail.com</p><p> PS: A note on the way the transits are calculated. For a single planetary transit, the calculation is analytical and exact. For multiple planets, the code uses a Monte Carlo approach in which first an <i>n</i> number of datapoints on the stellar surface are drawn. Then the program checks how many out of these datapoints fall within a planet. The ratio of the drawn number of points to that of which were covered by a planet is the ratio of eclipsed area to the total stellar area. The numerical approach is more computationally expensive hence the reduction in speed once more than one planet is added.</p>",
    "donate-text": "Exoplanet Transient Animator is provided totally free. If you enjoyed our project, consider supporting us with a donation!"
}